package com.project.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.project.dto.BloodDonationRequestDTO;
import com.project.entity.BloodDonationRequest;
import com.project.service.BloodDonationRequestService;

import jakarta.validation.Valid;
import java.util.List;

@RestController
@RequestMapping("/donation-requests")
@CrossOrigin(origins = "http://localhost:3000")
public class BloodDonationRequestController {

    @Autowired
    private BloodDonationRequestService bloodDonationRequestService;

    //  Donor submits a donation request (handled in SecurityConfig)
    @PostMapping("/blood-request")
    public ResponseEntity<?> submitDonationRequest(@Valid @RequestBody BloodDonationRequestDTO requestDTO) {
        BloodDonationRequest savedRequest = bloodDonationRequestService.submitDonationRequest(requestDTO);
        return ResponseEntity.status(HttpStatus.CREATED).body(savedRequest);
    }

    //  Admin views all pending donation requests
    @GetMapping("/pending")
    public ResponseEntity<?> getAllPendingRequests() {
        List<BloodDonationRequest> requests = bloodDonationRequestService.getAllPendingRequests();
        return ResponseEntity.ok(requests);
    }

    // Admin approves a donation request
    @PutMapping("/approve/{id}")
    public ResponseEntity<?> approveRequest(@PathVariable Long id) {
        BloodDonationRequest approvedRequest = bloodDonationRequestService.approveRequest(id);
        return ResponseEntity.ok(approvedRequest);
    }

    //  Admin deletes a donation request
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<?> deleteRequest(@PathVariable Long id) {
        boolean deleted = bloodDonationRequestService.deleteRequest(id);
        if (deleted) {
            return ResponseEntity.ok("Blood donation request deleted successfully.");
        } else {
            return ResponseEntity.badRequest().body("Failed to delete request. Request not found.");
        }
    }
    
    
    // Generate certificate for donors who made approved donation requests in the last 3 months
    @GetMapping("/generate-certificate/{donorId}")
    public ResponseEntity<?> generateCertificate(@PathVariable Long donorId) {
        String certificate = certificateService.generateCertificateForDonor(donorId);
        return certificate != null
                ? ResponseEntity.ok(certificate)
                : ResponseEntity.status(HttpStatus.NOT_FOUND).body("No approved donation requests found in the last 3 months.");
    }
}
