package com.project.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.project.dto.BloodRequestDTO;
import com.project.entity.BloodInventory;
import com.project.entity.BloodIssue;
import com.project.entity.BloodRequest;
import com.project.entity.BloodRequestStatus;
import com.project.entity.User;
import com.project.repository.BloodIssueRepository;
import com.project.repository.BloodRequestRepository;
import com.project.repository.UserRepository;

@Service
public class BloodRequestServiceImpl implements BloodRequestService {

    @Autowired
    private BloodRequestRepository bloodRequestRepository;

    @Autowired
    private UserRepository userRepository;
    @Autowired
    private EmailService emailService;


    @Autowired
    private BloodInventoryService bloodInventoryService;

    @Autowired
    private BloodIssueRepository bloodIssueRepository;

    @Override
    public BloodRequest createBloodRequest(BloodRequestDTO requestDTO) {
        Optional<User> hospitalOpt = userRepository.findById(requestDTO.getHospitalId());
        if (hospitalOpt.isEmpty()) {
            throw new RuntimeException("Hospital not found");
        }

        User hospital = hospitalOpt.get();
        BloodRequest bloodRequest = new BloodRequest();
        bloodRequest.setHospital(hospital);
        bloodRequest.setBloodType(requestDTO.getBloodType());
        bloodRequest.setQuantity(requestDTO.getQuantity());
        bloodRequest.setRemainingQuantity(requestDTO.getQuantity()); // Initially, remainingQuantity is the same as requested quantity
        bloodRequest.setStatus(BloodRequestStatus.PENDING);

        return bloodRequestRepository.save(bloodRequest);
    }

    @Override
    public List<BloodRequest> getPendingBloodRequests() {
        return bloodRequestRepository.findByStatus(BloodRequestStatus.PENDING);
    }

    @Override
    public List<BloodRequest> getAllBloodRequests() {
        return bloodRequestRepository.findAll();
    }

//    @Override
//    public void approveBloodRequest(Long requestId) {
//        Optional<BloodRequest> requestOpt = bloodRequestRepository.findById(requestId);
//        if (requestOpt.isEmpty()) {
//            throw new RuntimeException("Blood request not found");
//        }
//
//        BloodRequest bloodRequest = requestOpt.get();
//        Optional<BloodInventory> inventoryOpt = bloodInventoryService.getInventoryByBloodType(bloodRequest.getBloodType());
//
//        if (inventoryOpt.isEmpty()) {
//            throw new RuntimeException("Blood inventory not found for blood type: " + bloodRequest.getBloodType());
//        }
//
//        BloodInventory bloodInventory = inventoryOpt.get();
//        int availableUnits = bloodInventory.getAvailableUnits();
//        int requestedUnits = bloodRequest.getRemainingQuantity();
//
//        if (availableUnits == 0) {
//            throw new RuntimeException("No available blood units for blood type: " + bloodRequest.getBloodType());
//        }
//
//        int issuedUnits = Math.min(availableUnits, requestedUnits);
//        int remainingUnits = requestedUnits - issuedUnits;
//
//        bloodRequest.setRemainingQuantity(remainingUnits);
//        bloodRequest.setStatus(remainingUnits == 0 ? BloodRequestStatus.APPROVED : BloodRequestStatus.PARTIALLY_APPROVED);
//
//        // Update Inventory
//        bloodInventory.setAvailableUnits(availableUnits - issuedUnits);
//        bloodInventoryService.updateInventory(bloodInventory);
//
//        // Create Blood Issue Entry
//        BloodIssue bloodIssue = new BloodIssue();
//        bloodIssue.setBloodRequest(bloodRequest);
//        bloodIssue.setIssuedQuantity(issuedUnits);
//        bloodIssueRepository.save(bloodIssue);
//
//        bloodRequestRepository.save(bloodRequest);
//    }
    
    
    @Override
    public void approveBloodRequest(Long requestId) {
        Optional<BloodRequest> requestOpt = bloodRequestRepository.findById(requestId);
        if (requestOpt.isEmpty()) {
            throw new RuntimeException("Blood request not found");
        }

        BloodRequest bloodRequest = requestOpt.get();
        
        // Fetch hospital details using hospitalId
        Long hospitalId = bloodRequest.getHospital().getId();  // âœ… Correct
 // Assuming you have a hospitalId field in BloodRequest
        User hospital = userRepository.findById(hospitalId)
            .orElseThrow(() -> new RuntimeException("Hospital not found with ID: " + hospitalId));

        Optional<BloodInventory> inventoryOpt = bloodInventoryService.getInventoryByBloodType(bloodRequest.getBloodType());

        if (inventoryOpt.isEmpty() || inventoryOpt.get().getAvailableUnits() == 0) {
            // ðŸ”´ Send regret email to hospital when stock is insufficient
            String hospitalEmail = hospital.getEmail();  // Get email from Hospital entity
            String subject = "Regret: Blood Request Cannot Be Approved";
            String body = "Dear " + hospital.getName() + ",\n\n" +
                          "We regret to inform you that your blood request for " + 
                          bloodRequest.getBloodType() + " could not be approved due to insufficient stock.\n" +
                          "Please try again later.\n\n" +
                          "Thank you,\nBlood Bank Management Team";
            
            emailService.sendEmail(hospitalEmail, subject, body);

            throw new RuntimeException("Insufficient stock for blood type: " + bloodRequest.getBloodType());
        }

        BloodInventory bloodInventory = inventoryOpt.get();
        int availableUnits = bloodInventory.getAvailableUnits();
        int requestedUnits = bloodRequest.getRemainingQuantity();

        int issuedUnits = Math.min(availableUnits, requestedUnits);
        int remainingUnits = requestedUnits - issuedUnits;

        bloodRequest.setRemainingQuantity(remainingUnits);
        bloodRequest.setStatus(remainingUnits == 0 ? BloodRequestStatus.APPROVED : BloodRequestStatus.PARTIALLY_APPROVED);

        // Update Inventory
        bloodInventory.setAvailableUnits(availableUnits - issuedUnits);
        bloodInventoryService.updateInventory(bloodInventory);

        // Create Blood Issue Entry
        BloodIssue bloodIssue = new BloodIssue();
        bloodIssue.setBloodRequest(bloodRequest);
        bloodIssue.setIssuedQuantity(issuedUnits);
        bloodIssueRepository.save(bloodIssue);

        bloodRequestRepository.save(bloodRequest);
    }

    @Override
    public void approveRemainingBloodRequest(Long requestId) {
        Optional<BloodRequest> requestOpt = bloodRequestRepository.findById(requestId);
        if (requestOpt.isEmpty()) {
            throw new RuntimeException("Blood request not found");
        }

        BloodRequest bloodRequest = requestOpt.get();
        if (bloodRequest.getRemainingQuantity() == 0) {
            throw new RuntimeException("No remaining blood quantity to approve");
        }

        Optional<BloodInventory> inventoryOpt = bloodInventoryService.getInventoryByBloodType(bloodRequest.getBloodType());
        if (inventoryOpt.isEmpty()) {
            throw new RuntimeException("Blood inventory not found for blood type: " + bloodRequest.getBloodType());
        }

        BloodInventory bloodInventory = inventoryOpt.get();
        int availableUnits = bloodInventory.getAvailableUnits();
        int remainingUnits = bloodRequest.getRemainingQuantity();

        // Calculate the issued units
        int issuedUnits = Math.min(availableUnits, remainingUnits);
        bloodRequest.setRemainingQuantity(remainingUnits - issuedUnits);
        bloodRequest.setStatus(bloodRequest.getRemainingQuantity() == 0 ? BloodRequestStatus.APPROVED : BloodRequestStatus.PARTIALLY_APPROVED);

        // Update Inventory
        bloodInventory.setAvailableUnits(availableUnits - issuedUnits);
        bloodInventoryService.updateInventory(bloodInventory);

        // Find existing BloodIssue record for this BloodRequest, if any
        Optional<BloodIssue> existingBloodIssueOpt = bloodIssueRepository.findByBloodRequest(bloodRequest);
        if (existingBloodIssueOpt.isPresent()) {
            BloodIssue existingBloodIssue = existingBloodIssueOpt.get();
            existingBloodIssue.setIssuedQuantity(existingBloodIssue.getIssuedQuantity() + issuedUnits);  // Add the newly issued units to the existing record
            bloodIssueRepository.save(existingBloodIssue);  // Save the updated BloodIssue record
        } else {
            // If no existing BloodIssue record, create a new one
            BloodIssue bloodIssue = new BloodIssue();
            bloodIssue.setBloodRequest(bloodRequest);
            bloodIssue.setIssuedQuantity(issuedUnits);
            bloodIssueRepository.save(bloodIssue);
        }

        // Save the updated BloodRequest
        bloodRequestRepository.save(bloodRequest);
    }

    @Override
    public void rejectBloodRequest(Long requestId) {
        Optional<BloodRequest> requestOpt = bloodRequestRepository.findById(requestId);
        if (requestOpt.isEmpty()) {
            throw new RuntimeException("Blood request not found");
        }

        BloodRequest bloodRequest = requestOpt.get();
        bloodRequest.setStatus(BloodRequestStatus.REJECTED);
        bloodRequestRepository.save(bloodRequest);
    }
}
